# NetHack 4: aimake configuration.
{
    options => {
        packagename => 'nethack4',
        WIZARD => 'wizard', # change to change who can use wizard mode
    },
    rules => {
        _iflags => {
            object => 'optionset:IFLAGS',
            depends => 'optstring:-DNETCLIENT',
            verb => 'determined',
        },
        _cflags => {
            object => 'optionset:CFLAGS',
            depends => [
                'optstring:-Wall',
                'optstring:-Wextra',
                'optstring:-Wno-missing-field-initializers',
                # These warnings are probably worth fixing eventually,
                # but have too many false positives to be able to show
                # them right now
                'optstring:-Wno-unused-parameter',
                'optstring:-Wno-sign-compare',
                'optstring:-Wold-style-definition',
                'optstring:-Wstrict-prototypes',
                'optstring:-Wmissing-prototypes',
                'optstring:-Wmissing-declarations',
                'optstring:-Wpointer-arith',
            ],
            verb => 'determined',
        },
        _libraries => {
            object => 'optionset:libraries',
            depends => ['optstring:-ljansson',
                        'optstring:-lpq',
                        'optstring:-lws2_32'],
            verb => 'determined',
        },
        _build_desfile => {
            object => qr/^path:.*\.des$/s,
            command => ["bpath:libnethack/util/lev_main$exeext",
                        # We can't portably produce a "filename with a
                        # trailing slash". So we give a single space
                        # as the file part of the name, and get
                        # lev_main to replace it with the filename.
                        'optpath:-o :bpath:libnethack/dat/ ',
                        'optpath::'],
            output => qr/^Wrote '(.*)'.$/,
        },
        _levfile_command_line_argument => {
            object => qr/^bpath:.*\.lev$/,
            depends => 'optpath::',
        },
        _makedefs_date => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-v :bpath:libnethack/include/date.h",
                        "sys:always_rebuild"],
            output => 'bpath:libnethack/include/date.h',
        },
        _makedefs_verinfo => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-w :bpath:libnethack/include/verinfo.h"],
            output => 'bpath:libnethack/include/verinfo.h',
        },
        _makedefs_onames => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-o :bpath:libnethack/include/onames.h"],
            output => 'bpath:libnethack/include/onames.h',
        },
        _makedefs_pm => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-p :bpath:libnethack/include/pm.h"],
            output => 'bpath:libnethack/include/pm.h',
        },
        _makedefs_monstr => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-m :bpath:libnethack/src/monstr.c"],
            output => 'bpath:libnethack/src/monstr.c',
        },
        _makedefs_data => {
            object => "path:libnethack/dat/data.base",
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-d :",
                        "optpath::bpath:libnethack/dat/data"],
            output => 'bpath:libnethack/dat/data',
        },
        _makedefs_dungeon => {
            object => "path:libnethack/dat/dungeon.def",
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-e :",
                        "optpath::bpath:libnethack/dat/dungeon.pdf"],
            output => 'bpath:libnethack/dat/dungeon.pdf',
        },
        _makedefs_quest => {
            object => "path:libnethack/dat/quest.txt",
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-q :",
                        "optpath::bpath:libnethack/dat/quest.dat"],
            output => 'bpath:libnethack/dat/quest.dat',
        },
        _makedefs_oracles => {
            object => "path:libnethack/dat/oracles.txt",
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-d :",
                        "optpath::bpath:libnethack/dat/oracles"],
            output => 'bpath:libnethack/dat/oracles',
        },
        _makedefs_rumors => {
            # We rely on the fact that optpath: options given
            # explicitly always stay in the same order.
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optstring:-r",
                        "path:libnethack/dat/rumors.tru",
                        "optpath::path:libnethack/dat/rumors.tru",
                        "path:libnethack/dat/rumors.fal",
                        "optpath::path:libnethack/dat/rumors.fal",
                        "optpath::bpath:libnethack/dat/rumors"],
            output => 'bpath:libnethack/dat/rumors',
        },
        _compile_dungeon => {
            object => "bpath:libnethack/dat/dungeon.pdf",
            command => ["bpath:libnethack/util/dgn_main$exeext",
                        "optpath::"],
            output => 'bpath:libnethack/dat/dungeon',
        },
        _nhdata_levfiles => {
            object => "bpath:libnethack/util/dlb_main$exeext",
            command => ["intcmd:listtree", "sys:rebuild_late",
                        "optpath::bpath:libnethack/dat"],
            depends => qr/^(.+\.lev)$/s,
        },
        _nhdata => {
            command => ["bpath:libnethack/util/dlb_main$exeext",
                        "optpath:cf :bpath:libnethack/dat/nhdat",
                        "bpath:libnethack/dat/data",
                        "bpath:libnethack/dat/dungeon",
                        "bpath:libnethack/dat/oracles",
                        "bpath:libnethack/dat/quest.dat",
                        "bpath:libnethack/dat/rumors",
                        "optpath::bpath:libnethack/dat/data",
                        "optpath::bpath:libnethack/dat/dungeon",
                        "optpath::bpath:libnethack/dat/oracles",
                        "optpath::bpath:libnethack/dat/quest.dat",
                        "optpath::bpath:libnethack/dat/rumors"],
            in_subdir => "bpath:libnethack/dat",
            output => "bpath:libnethack/dat/nhdat",
        },
        _readme_dumps => {
            command => ["intcmd:writefile",
"optstring:This_directory_stores_dumplogs_produced_during_server_play.",
"optstring:When_you_play_locally,_dumplogs_are_saved_in_the_same_place_as_your",
"optstring:save_files_(e.g._~/.config/NetHack4/dumps_on_Linux).",
                        "optpath::bpath:readme-dumps"],
            output => "bpath:readme-dumps",
        },
        _readme_saves => {
            command => ["intcmd:writefile",
"optstring:This_directory_stores_data_shared_between_all_users.",
"optstring:When_you_play_locally,_your_save_files_are_stored_in_your_home",
"optstring:directory_(e.g._~/.config/NetHack4/saves_on_Linux).",
                        "optpath::bpath:readme-saves"],
            output => "bpath:readme-saves",
        },
        _install_main => {
            object => "bpath:nethack/src/main$exeext",
            install_dir => "gamesbindir",
            install_name => "nethack4$exeext",
        },
        _install_server => {
            object => "bpath:nethack_server/src/srvmain$exeext",
            install_dir => "gamesbindir",
            install_name => "nethack4-server$exeext",
        },
        _install_nhdat => {
            object => "bpath:libnethack/dat/nhdat",
            install_dir => "gamesdatadir",
        },
        _install_license => {
            object => "path:libnethack/dat/license",
            install_dir => "gamesdatadir",
        },
        _install_highscores => {
            object => "sys:ensure_exists",
            install_dir => "gamesstatedir",
            install_name => "record",
        },
        _install_xlogfile => {
            object => "sys:ensure_exists",
            install_dir => "gamesstatedir",
            install_name => "xlogfile",
        },
        _install_server_config => {
            object => "sys:touch_only",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain$exeext"],
            install_dir => "configdir",
        },
        _install_server_logfile => {
            object => "sys:ensure_exists",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain$exeext"],
            install_dir => "logdir",
            install_name => "nethack4.log",
        },
        _install_server_lockfile => {
            object => "sys:touch_only",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain$exeext"],
            install_dir => "lockdir",
        },
        _install_server_dumps => {
            object => "sys:create_subdir",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain$exeext"],
            install_dir => "gamesstatedir",
            install_name => "dumps",
        },
        _install_dumps_note => {
            object => "bpath:readme-dumps",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain$exeext"],
            install_dir => "gamesstatedir",
            install_name => "dumps/README",            
        },
        _install_saves_note => {
            object => "bpath:readme-saves",
            install_dir => "gamesstatedir",
            install_name => "README",            
        },
    },
}
